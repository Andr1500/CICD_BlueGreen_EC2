#variables
variables:
  DOCKER_REGISTRY: $AWS_ACCOUNT.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  IMAGE_NAME: python-app
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

#steps, run one by one
stages:
  - test
  - build
  - deploy
  - blue_green

#run test
run_tests:
  stage: test
  image: python:3.9-slim-buster #we need this image because default docker image is Ruby based on
  before_script: #set up necessary dependencies
    - apt-get update && apt-get install make
  script:
    - make test

#build docker image and push it to private repo
build_push_image:
  stage: build
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  services: #interract between main container and dind container
    - docker:dind
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
  script:
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    - docker build -t $DOCKER_REGISTRY/$IMAGE_NAME:$CI_PIPELINE_IID .
    - docker push $DOCKER_REGISTRY/$IMAGE_NAME:$CI_PIPELINE_IID

#deploy app on EC2 instance
deploy:
  stage: deploy
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  services: #interract between main container and dind container
    - docker:dind
  before_script:
    - amazon-linux-extras install docker
    - yum  install openssh-clients -y
    - yum  install openssh-server -y
    # - service sshd start
    - aws --version
    - docker --version
    - chmod 400 $SSH_KEY
  script: #ssh on remote host and execute commands on the host
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY $BUILD_HOST_USER@$BUILD_HOST_IP "
        export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" &&
        export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" &&
        aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $DOCKER_REGISTRY &&
        docker ps -a -q --filter name="python-app2" | xargs -r docker stop | xargs -r docker rm &&
        docker ps -a -q --filter name="python-app1" && docker run --name python-app2 -d -p 5000:5000 $DOCKER_REGISTRY/$IMAGE_NAME:$CI_PIPELINE_IID || docker run --name python-app1 -d -p 80:5000 $DOCKER_REGISTRY/$IMAGE_NAME:$CI_PIPELINE_IID"

blue_green:
  stage: blue_green
  when: manual
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  services: #interract between main container and dind container
    - docker:dind
  before_script:
    - yum  install openssh-clients -y
    - yum  install openssh-server -y
    # - service sshd start
    - aws --version
    - chmod 400 $SSH_KEY
  script: #ssh on remote host and execute commands on the host
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY $BUILD_HOST_USER@$BUILD_HOST_IP "
        sudo lsof -i -P -n | grep LISTEN | grep 80  && echo "port 80 is busy" || echo "port 80 is not busy" &&
        docker ps -a -q --filter name="python-app1" | xargs -r docker stop | xargs -r docker rm &&
        docker run --name "python-app1" -d -p 80:5000 $DOCKER_REGISTRY/$IMAGE_NAME:$CI_PIPELINE_IID &&
        docker ps -a -q --filter name="python-app2" | xargs -r docker stop | xargs -r docker rm &&
        docker image prune -a -f"
